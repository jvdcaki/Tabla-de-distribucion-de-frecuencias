// Recibe un fichero de texto llamado " datos.txt " y realiza una tabla de distribución de frecuencias con los datos agrupados
//
// Una vez ordenados los datos en un array, muestra al usuario el menor y el mayor dato. Pide el número de inicio del primer intervalo,
// el número de fin del último intervalo y salto entre los intervalos y muestra en pantalla la media, varianza y desviación típica de la muestra.
// La tabla con los intervalos, las marcas de clase, las frecuencias, frecuencias relativas frecuencias acumuladas y
// frecuencias relativas acumuladas la guardará en un fichero llamado " tabla.dat "

#include <iostream>
#include <fstream>
#include <cmath>
// MAX es el número máximo de datos que admite el programa
#define MAX 1000
// MAX2 es el número máximo de intervalos que admite
#define MAX2 500

using namespace std;

// Prototipos de las funciones //
void InsertionSort (float v[], int n);

//Funciones//

/** Función InsertionSort Theta(n^2): Ordena un array mediante el algoritmo de ordenación de inserción.       **/
/** Toma el primer elemento como un array ordenado. Recorre el array y compara cada elemento (key)            **/
/** con los anteriores, desplazándolos hacia la derecha si son mayores que él hasta que encuentra uno         **/
/** que es menor. Entonces inserta key y toma un elemento nuevo                                               **/
/** Recibe: Array, tamaño del array                                                                           **/
/** No devuelve nada                                                                                          **/
void InsertionSort (float v[], int n)
{
    int i, j;
    float key;

    //Recorremos el array desde el elemento 2
    for (i=1;i<n;i++)
    {
        j=i;

        //Tomamos el elemento i como key
        key=v[i];

        //Mientras quede algún elemento y sea mayor que key, lo desplaza hacia la derecha
        while (v[j-1]>key && j>0)
        {
            v[j]=v[j-1];
            j--;
        }

        //Inserta key
        v[j]=key;
    }

    return;
}



int main (void)
{
    ifstream fich1;
    ofstream fich2;
    float datos[MAX], num1, num2, num, salto_intervalo, media, varianza, desv_tipica;
    float intervalos[MAX2][2], frecuencias[MAX2], marcas_clase[MAX2], frec_relativas[MAX2], frec_acumuladas[MAX2], frec_acu_relativas[MAX2];
    int num_datos, num_intervalos, i, j;

    // Pasamos los datos del fichero a un array y contamos el número de datos
    fich1.open("datos.txt");

    i=0;
    while (!fich1.eof())
    {
        fich1 >> datos[i];
        i++;
    }

    num_datos = i;

    fich1.close();

    //Ordenamos los datos
    InsertionSort(datos, num_datos);


    //Mostramos en pantalla el menor y mayor dato
    cout << "El menor dato es: " << datos[0] << endl;
    cout << "El mayor dato es: " << datos[num_datos-1] << endl;

    //Pedimos algunos datos necesarios para construir la tabla
    cout << "Introduzca el numero de inicio del primer intervalo: ";
    cin >> num1;

    cout << "Introduzca el numero final del ultimo intervalo: ";
    cin >> num2;

    cout << "Introduzca la diferencia entre el inicio y final de los intervalos: ";
    cin >> salto_intervalo;

    //Calculamos el numero de intervalos
    num_intervalos = (num2-num1)/salto_intervalo + 1;

    //Guardamos los valores de los intervalos en un array
    num=num1;
    for (i=0;i<num_intervalos;i++)
    {
        intervalos[i][1]=num;
        intervalos[i][2]=num+salto_intervalo;
        num=num+salto_intervalo;
    }


    //Calculamos las frecuencias de los intervalos haciendo una búsqueda lineal de los datos que pertenecen a cada intervalo
    for (i=0;i<num_intervalos;i++)
    {
        frecuencias[i]=0;
        for (j=0;j<num_datos;j++)
        {
            if (datos[j]>intervalos[i][1] && datos[j]<intervalos[i][2]) frecuencias[i]++;
        }
    }


    //Calculamos las marcas de clase, frecuencias relativas, frecuencias acumuladas, frecuencias acumuladas relativas
    for (i=0;i<num_intervalos;i++)
    {
        marcas_clase[i]=(intervalos[i][1]+intervalos[i][2])/2;
        frec_relativas[i]=frecuencias[i]/num_datos;

        if (i==0) frec_acumuladas[i]=frecuencias[i];
        else frec_acumuladas[i]=frec_acumuladas[i-1]+frecuencias[i];

        frec_acu_relativas[i]=frec_acumuladas[i]/num_datos;
    }

    //Construimos la tabla de distribución de frecuencias
    fich2.open("tabla.dat");

    for (i=0;i<num_intervalos;i++)
    {

        fich2 << "(" << intervalos[i][1] << " ; " << intervalos[i][2] << ") " << "  " << marcas_clase[i] << "  " << frecuencias[i]
        << "  " << frec_relativas[i] << "  " << frec_acumuladas[i] << "  " << frec_acu_relativas[i] << endl;
    }

    fich2.close();

    //Calculamos la media
    media=0;
    for (i=0;i<num_datos;i++)
    {
      media = media + datos[i];
    }
    media = media/num_datos;

    //Calculamos la varianza
    varianza=0;
    for (i=0;i<num_datos;i++)
    {
        varianza = varianza + (datos[i]-media)*(datos[i]-media);
    }
    varianza = varianza/(1+num_datos);

    //Calculamos la desviación típica
    desv_tipica = sqrt(varianza);

    //Mostramos en pantalla los valores de la media, la desviación típica y la varianza
    cout << "Media: " << media << endl;
    cout << "Desviacion tipica: " << desv_tipica << endl;
    cout << "Varianza: " << varianza << endl;

    return 0;
}
